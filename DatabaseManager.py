import sqlite3
import bcrypt
from datetime import date
import re
from functools import wraps


def detect_sql_injection(param):
    """
    Detects potential SQL injection patterns in a parameter.
    """
    sql_injection_pattern = re.compile(
        r'(--|;|\'|\"|\/\*|\*\/|xp_|\bSELECT\b|\bUPDATE\b|\bDELETE\b|\bINSERT\b|\bDROP\b|\bUNION\b|\bALTER\b|\bEXEC\b)',
        re.IGNORECASE
    )
    if sql_injection_pattern.search(str(param)):
        return True
    return False

def sql_injection_safe(func):
    """
    Static method decorator to check for SQL injection in function parameters.
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        for arg in args:
            if isinstance(arg, (list, tuple)):
                for item in arg:
                    if detect_sql_injection(item):
                        raise ValueError("Potential SQL injection detected in arguments.")
            else:
                if detect_sql_injection(arg):
                    raise ValueError("Potential SQL injection detected in arguments.")

        for key, value in kwargs.items():
            if isinstance(value, (list, tuple)):
                for item in value:
                    if detect_sql_injection(item):
                        raise ValueError(f"Potential SQL injection detected in keyword argument '{key}'.")
            else:
                if detect_sql_injection(value):
                    raise ValueError(f"Potential SQL injection detected in keyword argument '{key}'.")

        return func(*args, **kwargs)
    return wrapper

class DatabaseManager:
    """class for operating with all the tables/databases"""
    def __init__(self, db_name='app_database.db'):
        """class constructor, constructs sqlite3 database from file whose name is saved in db_name and creates tables"""
        self.db_name = db_name
        self.conn = sqlite3.connect('app_database.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        """function that creates the following tables if they dont exist: users,session,active_session_users
           session and active_session_users are cleared on each new run of the server"""
        debug=False
        if(debug==False):
            self.cursor.execute("DROP TABLE IF EXISTS active_session_users")
            self.cursor.execute("DROP TABLE IF EXISTS sessions")

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL,
                salt TEXT NOT NULL
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                owner TEXT NOT NULL,
                creation_date TEXT NOT NULL,
                max_participants TEXT NOT NULL
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS active_session_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                session TEXT NOT NULL
            )
        ''')
    
        
        self.conn.commit()
        





    @sql_injection_safe
    def insert_user(self, username, password):
        """
        The `insert_user` function checks if a username already exists in the database, and if not, inserts
        the username, hashed password, and salt into the `users` table.
        
        :param username: It looks like you were about to provide information about the `username` parameter
        in the `insert_user` method. However, the information seems to be cut off. Could you please provide
        more details or let me know how I can assist you further with the `username` parameter?
        :param password: It looks like the password parameter is used in the `insert_user` method to insert
        a new user into a database table. The password is hashed using a salt generated by bcrypt before
        being stored in the database
        """
        count=self.cursor.execute("SELECT count(*) FROM users WHERE username=(?)",(username,)) 
        for row in count:
            if(row[0] != 0):
                print("already exists")
            else:
                salt = bcrypt.gensalt()
                hashed_pwd = self.HashPassword(password,salt)
                self.cursor.execute('INSERT INTO users (username, password,salt) VALUES (?, ?, ?)', (username, hashed_pwd ,salt.decode('utf-8'),))
                self.conn.commit()

    @sql_injection_safe
    def Create_Session(self,session):
        """
        The function `Create_Session` checks if a session with a given name already exists in a database
        table and creates a new session if it doesn't exist.
        
        :param session: The `Create_Session` method takes a `session` parameter, which is expected to be a
        list containing the following elements:
        :return: The function `Create_Session` will return a boolean value - `True` if the session was
        successfully created and `False` if a session with the same name already exists.
        """
        name=session[0]
        maxpart=session[1]
        owner=session[2]
        credate=str(date.today())
        count=self.cursor.execute("SELECT count(*) FROM sessions WHERE name=(?)",(name,)) 
        for row in count:
            if(row[0]!=0):
                print("a session with this name already exists")
                return False
            else:
                self.cursor.execute('INSERT INTO sessions(name,owner,creation_date,max_participants) VALUES (?,?,?,?)',(name,owner,credate,maxpart))
                self.conn.commit()
                print("session created")
                return True
    
    
    @sql_injection_safe
    def Delete_session(self,session):
        """
        The function `Delete_session` deletes a session from a database table if it exists and returns True,
        otherwise returns False.
        
        :param session: The `Delete_session` method takes a `session` parameter, which is the name of the
        session to be deleted from the database table named `sessions`. The method first checks if a session
        with the provided name exists in the database. If it finds a matching session, it deletes that
        session from the
        :return: The Delete_session method returns a boolean value - True if the session was successfully
        deleted from the database, and False if the session was not found in the database.
        """
        cursor=self.cursor.execute("SELECT name FROM sessions WHERE name=(?)",(session,))
        result=cursor.fetchone()
        if result:
            cursor.execute("DELETE FROM sessions WHERE name=(?)",(session,))
            print(session)
            print(result)
            self.conn.commit()
            return True
        return False


    def Print_sessions(self):
        """
        The function `Print_sessions` is for debbuging purposes, it retrieves and prints the names and owners of sessions from a database
        table.
        """
        cursor=self.cursor.execute("SELECT name,owner FROM sessions")
        for sess in cursor:
            print(sess)


    def Get_Sessions(self):
        """
        The function `Get_Sessions` retrieves session names and owners from a database table and returns
        them as a list.
        :return: A list of tuples containing the name and owner of each session from the database table
        "sessions" is being returned.
        """
        sessions=[]
        cursor=self.cursor.execute("SELECT name,owner FROM sessions")
        for sess in cursor:
            print(sess)
            sessions.append(sess)
        return sessions

    def Does_Sess_Exist(self,name):
        """
        The function checks if a session with a given name exists in a database table.
        
        :param name: The function `Does_Sess_Exist` takes a parameter `name` which is used to check if a
        session with the given name exists in the database table `sessions`. If a session with the provided
        name exists, the function will print a message and return `True`. Otherwise, it will return
        :return: The function `Does_Sess_Exist` returns a boolean value - `True` if a session with the given
        name exists in the database table `sessions`, and `False` otherwise.
        """
        cursor=self.cursor.execute("SELECT name FROM sessions")
        for sess in cursor:
            if(name==sess[0]):
                print("session with this name exists")
                return True
        return False

    @sql_injection_safe
    def Is_User_in_sess(self,username,sessname):
        """
        This function checks if a user is in an active session by querying a database table.
        
        :param username: The `Is_User_in_sess` function you provided checks if a user is in an active
        session based on the `username` and `sessname` parameters. It executes a SQL query to select the
        `username` from the `active_session_users` table where the `username` and `session`
        :param sessname: The `sessname` parameter in the `Is_User_in_sess` function represents the name of
        the session you are checking for the presence of a user. This function checks if a specific user is
        in a particular session by querying the `active_session_users` table in the database
        :return: The function `Is_User_in_sess` returns a boolean value. It returns `True` if the given
        `username` is found in the `active_session_users` table for the specified `sessname`, otherwise it
        returns `False`.
        """
        cursor=self.cursor.execute("SELECT username FROM active_session_users WHERE username=(?) and session=(?)",(username,sessname))
        print(username)
        print(sessname)
        row=cursor.fetchone()
        if(row is not None):
            if(len(row)==0):
                return False
            return True
        return False
    
    @sql_injection_safe
    def Can_Join(self,sessname):
        """
        This Python function checks if a user can join a session based on the number of participants already
        in the session and the maximum allowed participants.
        
        :param sessname: The `Can_Join` method checks if a user can join a session based on the session name
        provided (`sessname`). It first checks if the session exists in the database. If the session exists,
        it then checks the number of active users in the session and compares it to the maximum number of
        :return: The function `Can_Join` returns a boolean value - `True` if the user can join the session
        specified by `sessname`, and `False` if the user cannot join the session.
        """
        if(self.Does_Sess_Exist(sessname)==True):
            cursor=self.cursor.execute('SELECT session FROM active_session_users WHERE session= (?)',(sessname,))
            rows=cursor.fetchall()
            if(len(rows)==0):
                return True
            count=len(rows)
            maxpart_query=self.cursor.execute("SELECT max_participants FROM sessions WHERE name= (?)",(sessname,))
            maxpart_row=maxpart_query.fetchone()
            if(maxpart_row is not None):
                maxpart=int(maxpart_row[0])

            if(count<maxpart):
                return True
            else:
                return False
        else:
            print('session doesnt exist')
            return False

    @sql_injection_safe
    def Insert_Active_User(self,username,sessname):
        """
        The function `Insert_Active_User` inserts a username and session name into a table called
        `active_session_users`.
        
        :param username: The `username` parameter is the name of the user that you want to insert into the
        `active_session_users` table
        :param sessname: The `sessname` parameter in the `Insert_Active_User` function likely refers to the
        session name or identifier associated with the active user. This parameter is used to specify the
        session to which the user belongs when inserting the user into the `active_session_users` table in
        the database
        """
        self.cursor.execute('INSERT INTO active_session_users(username,session) VALUES (?,?)',(username,sessname))
        self.conn.commit()

    @sql_injection_safe
    def Remove_Active_User(self,username,sessname):
        """
        The function `Remove_Active_User` deletes a record from the `active_session_users` table based on
        the provided `username` and `sessname`.
        
        :param username: The `username` parameter is the username of the user that you want to remove from
        the active session users table
        :param sessname: The `sessname` parameter in the `Remove_Active_User` method likely refers to the
        session name or identifier associated with the active user you want to remove from the
        `active_session_users` table. This parameter is used to specify the session to which the user
        belongs when deleting the user's record
        """
        self.cursor.execute("DELETE FROM active_session_users WHERE username = (?) and session = (?)",(username,sessname,))
        self.conn.commit()

    @sql_injection_safe
    def Session_users(self,sessname):
        """
        This Python function retrieves a list of usernames associated with a specific session from a
        database table.
        
        :param sessname: The `sessname` parameter in the `Session_users` method is used to specify the
        session name for which you want to retrieve the active users. The method queries the database table
        `active_session_users` to fetch the usernames of users who are currently active in the specified
        session (`sessname`)
        :return: The function `Session_users` returns a list of usernames of active session users for a
        given session name `sessname`.
        """
        cursor=self.cursor.execute("SELECT username FROM active_session_users WHERE session = (?)",(sessname,))
        Users=[]
        for usr in cursor:
            print(usr[0])
            Users.append(usr[0])

        return Users

    def PrintUsers(self):
        """
        The function `PrintUsers` is for debbuging purposesn,it retrieves and prints the usernames, passwords, and salts of users from a
        database.
        """
        cursor=self.cursor.execute("SELECT username,password,salt FROM users")
        for row in cursor:
            print( row[0])
            print( row[1],"\n")
            print( row[2],"\n")
    
    def GetUsers(self):
        """
        This function retrieves a list of usernames from a database table named "users".
        :return: The `GetUsers` method is returning a list of usernames from the `users` table in the
        database.
        """
        Users=[]
        cursor=self.cursor.execute("SELECT username FROM users")
        for usr in cursor:
            print(usr[0])
            Users.append(usr[0])
        return Users

    def IfExists(self,username):
        """
        The function checks if a username already exists in a database table and returns True if it does,
        otherwise returns False.
        
        :param username: The code you provided is a method called IfExists that checks if a given username
        already exists in a database table named users. It iterates through the rows in the table and
        compares the username with the first element of each row. If a match is found, it prints "username
        already exists" and
        :return: The function `IfExists` is checking if a given `username` already exists in the database
        table `users`. If the username already exists, it prints "username already exists" and returns
        `True`. If the username does not exist, it returns `False`.
        """
        cursor=self.cursor.execute("SELECT username,password FROM users")
        for row in cursor:
            if(username==row[0]):
                print("username already exists")
                return True
        return False

    @sql_injection_safe
    def GetPassword(self,username):
        """
        The function `GetPassword` retrieves the password associated with a given username from a database
        table.
        
        :param username: The `GetPassword` function takes a `username` as a parameter and retrieves the
        password associated with that username from a database table called `users`. If the username does
        not exist in the database, it prints "user doesn't exist". If the username exists, it returns the
        password associated with that
        :return: The password associated with the given username is being returned.
        """
        cursor=self.cursor.execute("SELECT password FROM users WHERE username=(?) ",(username,))
        if(cursor==" "):
            print("user doesnt exist")
        for row in cursor:
            return row[0]
    
    @sql_injection_safe
    def GetSalt(self,username):
        """
        The function `GetSalt` retrieves the salt value associated with a given username from a database
        table.
        
        :param username: The `GetSalt` function takes a `username` as a parameter and retrieves the salt
        associated with that username from a database table named `users`. If the username does not exist in
        the database, it prints "user doesn't exist". If the username exists, it returns the salt value
        associated with
        :return: the salt value associated with the given username from the database.
        """
        cursor=self.cursor.execute("SELECT salt FROM users WHERE username=(?) ",(username,))
        if(cursor==" "):
            print("user doesnt exist")
        for row in cursor:
            return row[0]

    def HashPassword(self,password,salt):
        """
        The function HashPassword takes a password and a salt as input, encodes the password, hashes it
        using bcrypt, and returns the hashed password.
        
        :param password: The `password` parameter is the user's password that needs to be hashed for
        security purposes
        :param salt: A salt is a random value that is used as an additional input to a one-way function that
        hashes data, typically passwords. Salting is a common technique used to enhance the security of
        stored passwords by making them more resistant to dictionary attacks
        :return: The function `HashPassword` is returning the hashed password after encoding the input
        password and hashing it using the provided salt.
        """
        password=password.encode('utf-8')
        hashed = bcrypt.hashpw(password,salt)
        return hashed

    def close_connection(self):
        """
        The `close_connection` function closes the database connection.
        """
        self.conn.close()

    def Clear(self):
        """
        The `Clear` function in Python clears the database by executing a SQL query to delete all records
        from the "users" table.
        """
        self.cursor.execute("DELETE FROM users")